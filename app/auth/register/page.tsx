"use client"

import type React from "react"
import { Button } from "@/app/components/ui/button"
import { Input } from "@/app/components/ui/input"
import { RetroWindow } from "@/app/components/retro-window"
import Link from "next/link"
import { ArrowRight, AlertCircle, Eye, EyeOff, ChevronDown, CheckCircle } from "lucide-react"
import { useState } from "react"
import { useUserContext } from "@/contexts/user-context"
import { useRouter } from "next/navigation"
import { createClient } from "@/lib/supabase/client"

const countryCodes = [
  { code: "+962", country: "ุงูุฃุฑุฏู", flag: "๐ฏ๐ด" },
  { code: "+966", country: "ุงูุณุนูุฏูุฉ", flag: "๐ธ๐ฆ" },
  { code: "+971", country: "ุงูุฅูุงุฑุงุช", flag: "๐ฆ๐ช" },
  { code: "+965", country: "ุงููููุช", flag: "๐ฐ๐ผ" },
  { code: "+974", country: "ูุทุฑ", flag: "๐ถ๐ฆ" },
  { code: "+973", country: "ุงูุจุญุฑูู", flag: "๐ง๐ญ" },
  { code: "+968", country: "ุนูุงู", flag: "๐ด๐ฒ" },
  { code: "+961", country: "ูุจูุงู", flag: "๐ฑ๐ง" },
  { code: "+963", country: "ุณูุฑูุง", flag: "๐ธ๐พ" },
  { code: "+964", country: "ุงูุนุฑุงู", flag: "๐ฎ๐ถ" },
  { code: "+20", country: "ูุตุฑ", flag: "๐ช๐ฌ" },
  { code: "+212", country: "ุงููุบุฑุจ", flag: "๐ฒ๐ฆ" },
  { code: "+213", country: "ุงูุฌุฒุงุฆุฑ", flag: "๐ฉ๐ฟ" },
  { code: "+216", country: "ุชููุณ", flag: "๐น๐ณ" },
  { code: "+218", country: "ููุจูุง", flag: "๐ฑ๐พ" },
  { code: "+249", country: "ุงูุณูุฏุงู", flag: "๐ธ๐ฉ" },
  { code: "+967", country: "ุงูููู", flag: "๐พ๐ช" },
  { code: "+970", country: "ููุณุทูู", flag: "๐ต๐ธ" },
]

const universities = [
  "ุฌุงูุนุฉ ุงูุนููู ุงูุชุทุจูููุฉ ุงูุฎุงุตุฉ",
  "ุงูุฌุงูุนุฉ ุงูุฃุฑุฏููุฉ",
  "ุฌุงูุนุฉ ุนูุงู ุงูุฃูููุฉ",
  "ุฌุงูุนุฉ ุงููุฑููู",
  "ุฌุงูุนุฉ ูุคุชุฉ",
  "ุฌุงูุนุฉ ุงูุนููู ูุงูุชูููููุฌูุง ุงูุฃุฑุฏููุฉ",
  "ุงูุฌุงูุนุฉ ุงููุงุดููุฉ",
  "ุฌุงูุนุฉ ุขู ุงูุจูุช",
  "ุฌุงูุนุฉ ุงูุจููุงุก ุงูุชุทุจูููุฉ",
  "ุฌุงูุนุฉ ุงูุญุณูู ุจู ุทูุงู",
  "ุฌุงูุนุฉ ุงูุทูููุฉ ุงูุชูููุฉ",
  "ุงูุฌุงูุนุฉ ุงูุฃููุงููุฉ ุงูุฃุฑุฏููุฉ",
  "ุฌุงูุนุฉ ูููุงุฏูููุง",
  "ุฌุงูุนุฉ ุงูุฅุณุฑุงุก",
  "ุฌุงูุนุฉ ุงูุจุชุฑุง",
  "ุฌุงูุนุฉ ุงูุฒูุชููุฉ ุงูุฃุฑุฏููุฉ",
  "ุฌุงูุนุฉ ุฌุฑุด",
  "ุฌุงูุนุฉ ุฅุฑุจุฏ ุงูุฃูููุฉ",
  "ุฌุงูุนุฉ ุงูุฒุฑูุงุก",
  "ุฌุงูุนุฉ ุงูุฃููุฑุฉ ุณููุฉ ููุชูููููุฌูุง",
  "ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ",
  "ุฌุงูุนุฉ ุงูุดุฑู ุงูุฃูุณุท",
  "ุฌุงูุนุฉ ุฌุฏุงุฑุง",
  "ุงูุฌุงูุนุฉ ุงูุฃูุฑูููุฉ ูู ูุงุฏุจุง",
  "ุฌุงูุนุฉ ุนุฌููู ุงููุทููุฉ",
  "ูููุฉ ุงูุฃููุฑูุง ุงูุชุฑุจููุฉ",
  "ูููุฉ ุนููู ุงูุฌุงูุนูุฉ ุงูุชุทุจูููุฉ",
  "ุงูุฃูุงุฏูููุฉ ุงูุฃุฑุฏููุฉ ููููุณููู",
  "ุฌุงูุนุฉ ุงูุนูุจุฉ ููุชูููููุฌูุง",
  "ุฌุงูุนุฉ ุงูุญุณูู ุงูุชูููุฉ",
  "ุงูุฌุงูุนุฉ ุงูุนุฑุจูุฉ ุงูููุชูุญุฉ",
  "ุฌุงูุนุฉ ุงูุนููู ุงูุฅุณูุงููุฉ ุงูุนุงูููุฉ",
  "ุงูุฌุงูุนุฉ ุงูุฃุฑุฏููุฉ / ูุฑุน ุงูุนูุจุฉ",
  "ุฌุงูุนุฉ ุงูุจููุงุก ุงูุชุทุจูููุฉ / ูููุงุชูุง",
  "ุฌุงูุนุฉ ุงูุญุณูู ุจู ุทูุงู / ูููุฉ ุงูุนููู ุงูุทุจูุฉ ุงูุชุทุจูููุฉ",
  "ุฌุงูุนุฉ ุงูุทูููุฉ ุงูุชูููุฉ / ูููุฉ ุงูููุฏุณุฉ"
];

export default function RegisterPage() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    countryCode: "+962",
    university: "",
    major: "",
    year: "",
    password: "",
    confirmPassword: "",
    agreeToTerms: false,
  })

  const [errors, setErrors] = useState<Record<string, string>>({})
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [showCountryDropdown, setShowCountryDropdown] = useState(false)
  const [isSuccess, setIsSuccess] = useState(false)

  const clearError = () => {
    setErrors({})
  }

  const { loading, refreshUser } = useUserContext()
  const router = useRouter()
  const supabase = createClient()

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!formData.name.trim()) newErrors.name = "ุงูุงุณู ุงููุงูู ูุทููุจ"
    else if (formData.name.trim().length < 3) newErrors.name = "ุงูุงุณู ูุฌุจ ุฃู ูููู 3 ุฃุญุฑู ุนูู ุงูุฃูู"

    if (!formData.email.trim()) newErrors.email = "ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุทููุจ"
    else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email))
      newErrors.email = "ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุบูุฑ ุตุญูุญ"

    if (!formData.phone.trim()) newErrors.phone = "ุฑูู ุงููุงุชู ูุทููุจ"
    else {
      const phoneWithoutSpaces = formData.phone.replace(/\s/g, "")
      if (formData.countryCode === "+962" && !/^[7][0-9]{8}$/.test(phoneWithoutSpaces))
        newErrors.phone = "ุฑูู ุงููุงุชู ุงูุฃุฑุฏูู ุบูุฑ ุตุญูุญ (ูุฌุจ ุฃู ูุจุฏุฃ ุจู 7 ููุชููู ูู 9 ุฃุฑูุงู)"
      else if (formData.countryCode !== "+962" && !/^[0-9]{7,15}$/.test(phoneWithoutSpaces))
        newErrors.phone = "ุฑูู ุงููุงุชู ุบูุฑ ุตุญูุญ"
    }

    if (!formData.university) newErrors.university = "ูุฑุฌู ุงุฎุชูุงุฑ ุงูุฌุงูุนุฉ"
    if (!formData.major) newErrors.major = "ูุฑุฌู ุงุฎุชูุงุฑ ุงูุชุฎุตุต"
    if (!formData.year) newErrors.year = "ูุฑุฌู ุงุฎุชูุงุฑ ุงููุณุชูู ุงูุฏุฑุงุณู"
    if (!formData.password) newErrors.password = "ูููุฉ ุงููุฑูุฑ ูุทููุจุฉ"
    else if (formData.password.length < 8) newErrors.password = "ูููุฉ ุงููุฑูุฑ ูุฌุจ ุฃู ุชููู 8 ุฃุญุฑู ุนูู ุงูุฃูู"
    if (!formData.confirmPassword) newErrors.confirmPassword = "ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ ูุทููุจ"
    else if (formData.password !== formData.confirmPassword)
      newErrors.confirmPassword = "ูููุฉ ุงููุฑูุฑ ุบูุฑ ูุชุทุงุจูุฉ"
    if (!formData.agreeToTerms) newErrors.agreeToTerms = "ูุฌุจ ุงูููุงููุฉ ุนูู ุงูุดุฑูุท ูุงูุฃุญูุงู"

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!validateForm()) return

    setIsSubmitting(true)
    clearError()

    try {
      console.log('[REGISTER] Starting signup process...')

      // Sign up with Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email.trim(),
        password: formData.password,
        options: {
          data: {
            name: formData.name.trim(),
            phone: `${formData.countryCode}${formData.phone.trim()}`,
            university: formData.university,
            major: formData.major,
            year: formData.year,
            role: "student"
          }
        }
      })

      if (authError) {
        console.error('[REGISTER] Auth error:', authError)
        throw authError
      }

      if (!authData.user) {
        throw new Error('ูุดู ูู ุฅูุดุงุก ุญุณุงุจ ุงููุณุชุฎุฏู')
      }

      console.log('[REGISTER] Auth user created, creating profile...')

      // Create profile using the API
      const profileResponse = await fetch('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: formData.name.trim(),
          email: formData.email.trim(),
          phone: `${formData.countryCode}${formData.phone.trim()}`,
          university: formData.university,
          major: formData.major,
          year: formData.year
        })
      })



      console.log('[REGISTER] Profile created successfully')

      // Refresh user context to load the new profile
      await refreshUser()

      setIsSuccess(true)
      setTimeout(() => router.push("/dashboard"), 2000)

    } catch (err: any) {
      console.error('[REGISTER] Registration error:', err)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleInputChange = (field: string, value: string | boolean) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
    if (errors[field]) setErrors((prev) => ({ ...prev, [field]: "" }))
  }

  const handleCountryCodeSelect = (code: string) => {
    setFormData((prev) => ({ ...prev, countryCode: code }))
    setShowCountryDropdown(false)
    if (errors.phone) setErrors((prev) => ({ ...prev, phone: "" }))
  }

  const selectedCountry = countryCodes.find((c) => c.code === formData.countryCode) || countryCodes[0]

  if (isSuccess) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4" style={{ background: "var(--panel)" }}>
        <div className="w-full max-w-md">
          <RetroWindow title="ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ">
            <div className="p-6 text-center">
              <CheckCircle className="w-16 h-16 text-green-600 mx-auto mb-4" />
              <h2 className="text-xl font-bold mb-4" style={{ color: "var(--ink)" }}>
                ูุฑุญุจุงู ุจู ูู ุชุฎุตุต!
              </h2>
              <p className="text-gray-600 mb-6">
                ุชู ุฅูุดุงุก ุญุณุงุจู ุจูุฌุงุญ. ุณูุชู ุชูุฌููู ูุจุงุดุฑุฉ ููุฏุงุด ุจูุฑุฏ.
              </p>
              <div className="mb-4">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-600 mx-auto"></div>
                <p className="text-sm text-gray-500 mt-2">ุฌุงุฑู ุงูุชูุฌูู...</p>
              </div>
              <div className="space-y-3">
                <Button
                  asChild
                  className="retro-button w-full"
                  style={{ background: "var(--primary)", color: "white" }}
                >
                  <Link href="/dashboard">ุงูุฐูุงุจ ููุฏุงุด ุจูุฑุฏ</Link>
                </Button>
                <Button
                  variant="outline"
                  className="retro-button w-full bg-transparent"
                  onClick={() => setIsSuccess(false)}
                >
                  ุฅูุดุงุก ุญุณุงุจ ุขุฎุฑ
                </Button>
              </div>
            </div>
          </RetroWindow>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4" style={{ background: "var(--panel)" }}>
      <div className="w-full max-w-md">
        <div className="mb-6">
          <Button asChild variant="outline" className="retro-button bg-transparent">
            <Link href="/">
              <ArrowRight className="w-4 h-4 ml-1" />
              ุงูุนูุฏุฉ ููุฑุฆูุณูุฉ
            </Link>
          </Button>
        </div>

        <RetroWindow title="ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ">
          <div className="p-6">
            <form onSubmit={handleSubmit} className="space-y-4">
              {errors.submit && (
                <div className="p-3 bg-red-50 border border-red-200 rounded flex items-center gap-2">
                  <AlertCircle className="w-4 h-4 text-red-600" />
                  <span className="text-red-600 text-sm">{errors.submit}</span>
                </div>
              )}

              {/* ุงูุงุณู ุงููุงูู */}
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: "var(--ink)" }}>
                  ุงูุงุณู ุงููุงูู *
                </label>
                <Input
                name="userName"
                  value={formData.name}
                  onChange={(e) => handleInputChange("name", e.target.value)}
                  placeholder="ุฃุญูุฏ ูุญูุฏ ุงูุณุงูู"
                  className={`retro-window ${errors.name ? "border-red-500" : ""}`}
                  style={{ background: "white", border: "2px inset #c0c0c0" }}
                />
                {errors.name && (
                  <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                    <AlertCircle className="w-3 h-3" />
                    {errors.name}
                  </p>
                )}
              </div>

              {/* ุงูุจุฑูุฏ ุงูุฅููุชุฑููู */}
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: "var(--ink)" }}>
                  ุงูุจุฑูุฏ ุงูุฅููุชุฑููู *
                </label>
                <Input
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange("email", e.target.value)}
                  placeholder="example@domain.com"
                  className={`retro-window ${errors.email ? "border-red-500" : ""}`}
                  style={{ background: "white", border: "2px inset #c0c0c0" }}
                />
                {errors.email && (
                  <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                    <AlertCircle className="w-3 h-3" />
                    {errors.email}
                  </p>
                )}
              </div>

              {/* ุฑูู ุงููุงุชู + country code */}
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: "var(--ink)" }}>
                  ุฑูู ุงููุงุชู *
                </label>
                <div className="flex gap-2">
                  <div className="relative">
                    <button
                      type="button"
                      onClick={() => setShowCountryDropdown(!showCountryDropdown)}
                      className="flex items-center gap-2 px-3 py-2 retro-window bg-white border-2 border-gray-300 hover:border-gray-400 transition-colors"
                      style={{ border: "2px inset #c0c0c0", minWidth: "120px" }}
                    >
                      <span className="text-lg">{selectedCountry.flag}</span>
                      <span className="text-sm font-mono">{selectedCountry.code}</span>
                      <ChevronDown className="w-4 h-4" />
                    </button>

                    {showCountryDropdown && (
                      <div
                        className="absolute top-full left-0 mt-1 w-64 max-h-60 overflow-y-auto retro-window bg-white border-2 z-50"
                        style={{ border: "2px outset #c0c0c0" }}
                      >
                        {countryCodes.map((country) => (
                          <button
                            key={country.code}
                            type="button"
                            onClick={() => handleCountryCodeSelect(country.code)}
                            className="w-full flex items-center gap-3 px-3 py-2 text-right hover:bg-gray-100 transition-colors"
                          >
                            <span className="text-lg">{country.flag}</span>
                            <span className="flex-1 text-sm">{country.country}</span>
                            <span className="text-sm font-mono text-gray-600">{country.code}</span>
                          </button>
                        ))}
                      </div>
                    )}
                  </div>

                  <Input
                    value={formData.phone}
                    onChange={(e) => handleInputChange("phone", e.target.value)}
                    placeholder={formData.countryCode === "+962" ? "791234567" : "1234567890"}
                    className={`retro-window flex-1 ${errors.phone ? "border-red-500" : ""}`}
                    style={{ background: "white", border: "2px inset #c0c0c0" }}
                  />
                </div>
                {errors.phone && (
                  <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                    <AlertCircle className="w-3 h-3" />
                    {errors.phone}
                  </p>
                )}
                <p className="text-xs text-gray-500 mt-1">
                  {formData.countryCode === "+962"
                    ? "ุฃุฏุฎู ุฑูู ุงููุงุชู ุจุฏูู ููุชุงุญ ุงูุจูุฏ (ูุซุงู: 791234567)"
                    : "ุฃุฏุฎู ุฑูู ุงููุงุชู ุจุฏูู ููุชุงุญ ุงูุจูุฏ"}
                </p>
              </div>

              {/* ุงูุฌุงูุนุฉ */}
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: "var(--ink)" }}>
                  ุงูุฌุงูุนุฉ *
                </label>
                <select
                  value={formData.university}
                  onChange={(e) => handleInputChange("university", e.target.value)}
                  className={`w-full p-2 retro-window ${errors.university ? "border-red-500" : ""}`}
                  style={{ background: "white", border: "2px inset #c0c0c0" }}
                >
                  <option value="">ุงุฎุชุฑ ุงูุฌุงูุนุฉ</option>
                  {universities.map((uni) => (
                    <option key={uni} value={uni}>
                      {uni}
                    </option>
                  ))}
                </select>
                {errors.university && (
                  <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                    <AlertCircle className="w-3 h-3" />
                    {errors.university}
                  </p>
                )}
              </div>

              {/* ุงูุชุฎุตุต */}
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: "var(--ink)" }}>
                  ุงูุชุฎุตุต *
                </label>
                <Input
                  value={formData.major}
                  onChange={(e) => handleInputChange("major", e.target.value)}
                  placeholder={"ุงูุชุจ ุงุณู ุชุฎุตุตู"}
                  className={`retro-window flex-1 ${errors.major ? "border-red-500" : ""}`}
                  style={{ background: "white", border: "2px inset #c0c0c0" }}
                />
              </div>

              {/* ุงููุณุชูู ุงูุฏุฑุงุณู */}
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: "var(--ink)" }}>
                  ุงููุณุชูู ุงูุฏุฑุงุณู *
                </label>
                <select
                  value={formData.year}
                  onChange={(e) => handleInputChange("year", e.target.value)}
                  className={`w-full p-2 retro-window ${errors.year ? "border-red-500" : ""}`}
                  style={{ background: "white", border: "2px inset #c0c0c0" }}
                >
                  <option value="">ุงุฎุชุฑ ุงููุณุชูู</option>
                  <option value="1">ุงูุณูุฉ ุงูุฃููู</option>
                  <option value="2">ุงูุณูุฉ ุงูุซุงููุฉ</option>
                  <option value="3">ุงูุณูุฉ ุงูุซุงูุซุฉ</option>
                  <option value="4">ุงูุณูุฉ ุงูุฑุงุจุนุฉ</option>
                </select>
                {errors.year && (
                  <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                    <AlertCircle className="w-3 h-3" />
                    {errors.year}
                  </p>
                )}
              </div>

              {/* ูููุฉ ุงููุฑูุฑ */}
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: "var(--ink)" }}>
                  ูููุฉ ุงููุฑูุฑ *
                </label>
                <div className="relative">
                  <Input
                    type={showPassword ? "text" : "password"}
                    value={formData.password}
                    onChange={(e) => handleInputChange("password", e.target.value)}
                    placeholder="โขโขโขโขโขโขโขโข"
                    className={`retro-window pr-10 ${errors.password ? "border-red-500" : ""}`}
                    style={{ background: "white", border: "2px inset #c0c0c0" }}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
                  >
                    {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                  </button>
                </div>
                {errors.password && (
                  <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                    <AlertCircle className="w-3 h-3" />
                    {errors.password}
                  </p>
                )}
              </div>

              {/* ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ */}
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: "var(--ink)" }}>
                  ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ *
                </label>
                <div className="relative">
                  <Input
                    type={showConfirmPassword ? "text" : "password"}
                    value={formData.confirmPassword}
                    onChange={(e) => handleInputChange("confirmPassword", e.target.value)}
                    placeholder="โขโขโขโขโขโขโขโข"
                    className={`retro-window pr-10 ${errors.confirmPassword ? "border-red-500" : ""}`}
                    style={{ background: "white", border: "2px inset #c0c0c0" }}
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
                  >
                    {showConfirmPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                  </button>
                </div>
                {errors.confirmPassword && (
                  <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                    <AlertCircle className="w-3 h-3" />
                    {errors.confirmPassword}
                  </p>
                )}
              </div>

              {/* ุงูููุงููุฉ ุนูู ุงูุดุฑูุท */}
              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={formData.agreeToTerms}
                  onChange={(e) => handleInputChange("agreeToTerms", e.target.checked)}
                  id="agreeToTerms"
                  className="accent-blue-500"
                />
                <label htmlFor="agreeToTerms" className="text-sm">
                  ุฃูุงูู ุนูู <Link href="#" className="underline text-blue-600">ุงูุดุฑูุท ูุงูุฃุญูุงู</Link> *
                </label>
              </div>
              {errors.agreeToTerms && (
                <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                  <AlertCircle className="w-3 h-3" />
                  {errors.agreeToTerms}
                </p>
              )}

              <Button type="submit" disabled={isSubmitting || loading} className="retro-button w-full mt-4">
                {isSubmitting || loading ? "ุฌุงุฑู ุงูุฅูุดุงุก..." : "ุฅูุดุงุก ุงูุญุณุงุจ"}
              </Button>
            </form>
          </div>
        </RetroWindow>
      </div>
    </div>
  )
}
